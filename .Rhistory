# Ev_Team (event team) is the shooting team
data <- data %>%
mutate(Shooting_Team = Ev_Team)
# Point differential for the team with possession
data <- data %>%
mutate(Point_Diff = case_when(
Shooting_Team == Home_Team ~ Home_Score - Away_Score,
Shooting_Team == Away_Team ~ Away_Score - Home_Score,
TRUE ~ NA_real_
))
# Include all valid events
model_data <- data %>%
filter(!is.na(Shooting_Team) & !is.na(Point_Diff)) %>%
select(Time_Block, Point_Diff, Is_Shot)
# Fit the poisson regression
poisson_model <- glm(Is_Shot ~ Time_Block + Point_Diff,
family = poisson(link = "log"),
data = model_data)
# Predict the shot rate
predict_shot_rate <- function(time_block, point_diff) {
new_data <- data.frame(
Time_Block = as.factor(time_block),
Point_Diff = point_diff
)
predict(poisson_model, newdata = new_data, type = "response")
}
# Test
predict_shot_rate(time_block = 10, point_diff = 20)
# Data
data <- read_csv("C:/Users/luked/Downloads/nhl_pbp20162017.csv")
# Get minutes
data <- data %>%
mutate(time_minutes = Seconds_Elapsed / 60)
# SHOT/GOAL indicator
data <- data %>%
mutate(is_shot = if_else(Event %in% c("SHOT", "GOAL"), 1, 0))
# Make 4 blocks for each period
data <- data %>%
mutate(time_block = (Period - 1) * 4 + case_when(
time_minutes <= 5 ~ 1,
time_minutes <= 10 ~ 2,
time_minutes <= 15 ~ 3,
time_minutes <= 20 ~ 4
)) %>%
mutate(time_block = as.factor(time_block))
# Ev_Team (event team) is the shooting team
data <- data %>%
mutate(shooting_team = Ev_Team)
# Point differential for the team with possession
data <- data %>%
mutate(point_diff = case_when(
shooting_team == Home_Team ~ Home_Score - Away_Score,
shooting_team == Away_Team ~ Away_Score - Home_Score,
TRUE ~ NA_real_
))
# Include all valid events
model_data <- data %>%
filter(!is.na(shooting_team) & !is.na(point_diff)) %>%
select(time_block, point_diff, is_shot)
# Fit the poisson regression
poisson_model <- glm(is_shot ~ time_block + point_diff,
family = poisson(link = "log"),
data = model_data)
# Predict the shot rate
predict_shot_rate <- function(time_block, point_diff) {
new_data <- data.frame(
time_block = as.factor(time_block),
point_diff = point_diff
)
predict(poisson_model, newdata = new_data, type = "response")
}
# Test
predict_shot_rate(time_block = 10, point_diff = 20)
# Read in the dataset
data <- read_csv("C:/Users/luked/Downloads/nhl_pbp20162017.csv")
createquadrant <- function(data) {
data$quadrant <- ifelse(data$xC >= 0 & data$yC >= 0, 1,
ifelse(data$xC < 0 & data$yC >= 0, 2,
ifelse(data$xC < 0 & data$yC < 0, 3,
ifelse(data$xC >= 0 & data$yC < 0, 4, NA))))
return(data)
}
data <- createquadrant(data)
# Filter to shot events (both SHOT and GOAL)
shot_data <- data %>%
filter(Event %in% c("SHOT", "GOAL"))
# Create a binary indicator for shot success (on goal)
# Define a shot as "on goal" if it is a GOAL or if it is a SHOT whose Description contains "ONGOAL"
shot_data <- shot_data %>%
mutate(On_Goal = if_else(Event == "GOAL" | (Event == "SHOT" & str_detect(Description, "ONGOAL")), 1, 0))
# Fit a logistic regression model to estimate the shot success rate based on spatial location.
# xC and yC are assumed to be the coordinates of the shot on the ice.
shot_success_model <- glm(On_Goal ~ xC + yC,
data = shot_data,
family = binomial(link = "logit"))
# Prediction function: Given x and y coordinates, predict the probability of a shot being on goal.
predict_shot_success <- function(x, y) {
new_data <- data.frame(xC = x, yC = y)
predict(shot_success_model, newdata = new_data, type = "response")
}
# Example prediction for a shot at location (x = 0, y = 0)
predict_shot_success(x = 0, y = 0)
# Read in the dataset
data <- read_csv("C:/Users/luked/Downloads/nhl_pbp20162017.csv")
createquadrant <- function(data) {
data$quadrant <- ifelse(data$xC >= 0 & data$yC >= 0, 1,
ifelse(data$xC < 0 & data$yC >= 0, 2,
ifelse(data$xC < 0 & data$yC < 0, 3,
ifelse(data$xC >= 0 & data$yC < 0, 4, NA))))
return(data)
}
createquadrant <- function(data) {
data$quadrant <- ifelse(data$xC >= 0 & data$yC >= 0, 1,
ifelse(data$xC < 0 & data$yC >= 0, 2,
ifelse(data$xC < 0 & data$yC < 0, 3,
ifelse(data$xC >= 0 & data$yC < 0, 4, NA))))
return(data)
}
data <- createquadrant(data)
# Filter to shot events (both SHOT and GOAL)
shot_data <- data %>%
filter(Event %in% c("SHOT", "GOAL"))
# Create a binary indicator for shot success (on goal)
# Define a shot as "on goal" if it is a GOAL or if it is a SHOT whose Description contains "ONGOAL"
shot_data <- shot_data %>%
mutate(On_Goal = if_else(Event == "GOAL" | (Event == "SHOT" & str_detect(Description, "ONGOAL")), 1, 0))
# Fit a logistic regression model to estimate the shot success rate based on spatial location.
# xC and yC are assumed to be the coordinates of the shot on the ice.
shot_success_model <- glm(On_Goal ~ xC + yC,
data = shot_data,
family = binomial(link = "logit"))
# Prediction function: Given x and y coordinates, predict the probability of a shot being on goal.
predict_shot_success <- function(x, y) {
new_data <- data.frame(xC = x, yC = y)
predict(shot_success_model, newdata = new_data, type = "response")
}
# Create a quadrant variable based on the spatial coordinates
createquadrant <- function(data) {
data <- data %>%
mutate(quadrant = case_when(
xC >= 0 & yC >= 0 ~ 1,
xC < 0 & yC >= 0 ~ 2,
xC < 0 & yC < 0 ~ 3,
xC >= 0 & yC < 0 ~ 4,
TRUE ~ NA_real_
))
return(data)
}
# Read in the dataset
data <- read_csv("C:/Users/luked/Downloads/nhl_pbp20162017.csv")
# Create a quadrant variable based on the spatial coordinates
createquadrant <- function(data) {
data <- data %>%
mutate(quadrant = case_when(
xC >= 0 & yC >= 0 ~ 1,
xC < 0 & yC >= 0 ~ 2,
xC < 0 & yC < 0 ~ 3,
xC >= 0 & yC < 0 ~ 4,
TRUE ~ NA_real_
))
return(data)
}
data <- createquadrant(data)
# Filter to shot events (both SHOT and GOAL)
shot_data <- data %>%
filter(Event %in% c("SHOT", "GOAL"))
# Create a binary indicator for shot success ("on goal").
# We define a shot as "on goal" if it is a GOAL or if it is a SHOT whose Description contains "ONGOAL" (case insensitive)
shot_data <- shot_data %>%
mutate(On_Goal = if_else(Event == "GOAL" |
(Event == "SHOT" & !is.na(Description) &
str_detect(Description, regex("ONGOAL", ignore_case = TRUE))),
1, 0))
# Scale spatial coordinates to help model convergence
shot_data <- shot_data %>%
mutate(xC_scaled = as.numeric(scale(xC)),
yC_scaled = as.numeric(scale(yC)))
# Fit a logistic regression model to estimate the shot success rate based on scaled spatial location.
shot_success_model <- glm(On_Goal ~ xC_scaled + yC_scaled,
data = shot_data,
family = binomial(link = "logit"),
control = glm.control(maxit = 100))
# Prediction function: Given x and y coordinates, predict the probability of a shot being on goal.
# New observations are scaled using the same center and scale as the model data.
predict_shot_success <- function(x, y) {
# Extract scaling attributes from the model data
x_center <- attr(shot_data$xC_scaled, "scaled:center")
x_scale <- attr(shot_data$xC_scaled, "scaled:scale")
y_center <- attr(shot_data$yC_scaled, "scaled:center")
y_scale <- attr(shot_data$yC_scaled, "scaled:scale")
new_data <- data.frame(
xC_scaled = (x - x_center) / x_scale,
yC_scaled = (y - y_center) / y_scale
)
predict(shot_success_model, newdata = new_data, type = "response")
}
# Example prediction for a shot at location (x = 0, y = 0)
predict_shot_success(x = 0, y = 0)
# Read in the dataset
data <- read_csv("C:/Users/luked/Downloads/nhl_pbp20162017.csv")
# Create a quadrant variable based on spatial coordinates (optional)
createquadrant <- function(data) {
data <- data %>%
mutate(quadrant = case_when(
xC >= 0 & yC >= 0 ~ 1,
xC < 0 & yC >= 0 ~ 2,
xC < 0 & yC < 0 ~ 3,
xC >= 0 & yC < 0 ~ 4,
TRUE ~ NA_real_
))
return(data)
}
data <- createquadrant(data)
# Filter to shot events (both SHOT and GOAL)
shot_data <- data %>%
filter(Event %in% c("SHOT", "GOAL"))
# Create a binary indicator for shot success ("on goal").
# A shot is "on goal" if it is a GOAL or if it is a SHOT whose Description contains "ONGOAL" (case insensitive).
shot_data <- shot_data %>%
mutate(On_Goal = if_else(Event == "GOAL" |
(Event == "SHOT" & !is.na(Description) &
str_detect(Description, regex("ONGOAL", ignore_case = TRUE))),
1, 0))
# Compute scaling parameters manually for spatial coordinates
x_center <- mean(shot_data$xC, na.rm = TRUE)
x_scale  <- sd(shot_data$xC, na.rm = TRUE)
y_center <- mean(shot_data$yC, na.rm = TRUE)
y_scale  <- sd(shot_data$yC, na.rm = TRUE)
# Create scaled versions of the spatial coordinates using the saved parameters
shot_data <- shot_data %>%
mutate(xC_scaled = (xC - x_center) / x_scale,
yC_scaled = (yC - y_center) / y_scale)
# Fit a logistic regression model to estimate shot success (on goal) using the scaled spatial predictors.
shot_success_model <- glm(On_Goal ~ xC_scaled + yC_scaled,
data = shot_data,
family = binomial(link = "logit"),
control = glm.control(maxit = 100))
# Prediction function: Given x and y coordinates, predict the probability of a shot being on goal.
# New observations are scaled using the same center and scale as the model data.
predict_shot_success <- function(x, y) {
new_data <- data.frame(
xC_scaled = (x - x_center) / x_scale,
yC_scaled = (y - y_center) / y_scale
)
predict(shot_success_model, newdata = new_data, type = "response")
}
# Example prediction for a shot at location (x = 0, y = 0)
predict_shot_success(x = 0, y = 0)
# Example prediction for a shot at location (x = 0, y = 0)
predict_shot_success(x = 0, y = 0)
# Example prediction for a shot at location (x = 0, y = 0)
predict_shot_success(x = 4, y = 20)
data
view(data)
View(data)
library(logistf)  # For Firth logistic regression
# Read in the dataset
data <- read_csv("C:/Users/luked/Downloads/nhl_pbp20162017.csv")
# Create a quadrant variable based on spatial coordinates (optional)
data <- data %>%
mutate(quadrant = case_when(
xC >= 0 & yC >= 0 ~ 1,
xC < 0 & yC >= 0 ~ 2,
xC < 0 & yC < 0 ~ 3,
xC >= 0 & yC < 0 ~ 4,
TRUE ~ NA_real_
))
# Filter to shot attempts (including MISS events so we capture unsuccessful shots)
shot_data <- data %>%
filter(Event %in% c("SHOT", "GOAL", "MISS"))
# Create a binary indicator for shot success ("on goal").
# A shot is defined as "on goal" if it is a GOAL,
# or if it is a SHOT whose Description contains "ONGOAL" (case insensitive);
# all MISS events (and other cases) are 0.
shot_data <- shot_data %>%
mutate(On_Goal = case_when(
Event == "GOAL" ~ 1,
Event == "SHOT" & !is.na(Description) &
str_detect(Description, regex("ONGOAL", ignore_case = TRUE)) ~ 1,
TRUE ~ 0
))
# Compute scaling parameters manually for the spatial coordinates
x_center <- mean(shot_data$xC, na.rm = TRUE)
x_scale  <- sd(shot_data$xC, na.rm = TRUE)
y_center <- mean(shot_data$yC, na.rm = TRUE)
y_scale  <- sd(shot_data$yC, na.rm = TRUE)
# Create scaled spatial coordinates
shot_data <- shot_data %>%
mutate(xC_scaled = (xC - x_center) / x_scale,
yC_scaled = (yC - y_center) / y_scale)
# Fit a Firth (penalized) logistic regression model to handle separation issues.
shot_success_model <- logistf(On_Goal ~ xC_scaled + yC_scaled, data = shot_data)
library(logistf)  # For Firth logistic regression
# Fit a Firth (penalized) logistic regression model to handle separation issues.
shot_success_model <- logistf(On_Goal ~ xC_scaled + yC_scaled, data = shot_data)
# Prediction function: Given new x and y coordinates, predict the probability of a shot being on goal.
predict_shot_success <- function(x, y) {
new_data <- data.frame(
xC_scaled = (x - x_center) / x_scale,
yC_scaled = (y - y_center) / y_scale
)
predict(shot_success_model, newdata = new_data, type = "response")
}
# Example predictions:
predict_shot_success(x = 0, y = 0)
predict_shot_success(x = 4, y = 20)
# Example predictions:
predict_shot_success(x = 0, y = 0)
predict_shot_success(x = 4, y = 20)
# Example predictions:
predict_shot_success(x = 0, y = 5)
predict_shot_success(x = 4, y = 20)
# Example predictions:
predict_shot_success(x = 0, y = 0)
# Example predictions:
predict_shot_success(x = 100, y = 0)
# Example predictions:
predict_shot_success(x = 50, y = 0)
predict_shot_success(x = -20, y = 20)
predict_shot_success(x = -1000, y = 20)
predict_shot_success(x = -40, y = 20)
# Logistic regression model (for separation issues)
shot_success_model <- glm(On_Goal ~ xC_scaled + yC_scaled, family = poisson(link = "log"),
data = shot_data)
# New prediction function (probability of a shot being on goal)
predict_shot_success <- function(x, y) {
new_data <- data.frame(
xC_scaled = (x - x_center) / x_scale,
yC_scaled = (y - y_center) / y_scale
)
predict(shot_success_model, newdata = new_data, type = "response")
}
# Test
predict_shot_success(x = 50, y = 0)
predict_shot_success(x = -40, y = 20)
# Logistic regression model (for separation issues)
shot_success_model <- glm(On_Goal ~ xC_scaled + yC_scaled, family = poisson(link = "log"),
data = shot_data)
# New prediction function (probability of a shot being on goal)
predict_shot_success <- function(x, y) {
new_data <- data.frame(
xC_scaled = (x - x_center) / x_scale,
yC_scaled = (y - y_center) / y_scale
)
predict(shot_success_model, newdata = new_data, type = "response")
}
# Test
predict_shot_success(x = 50, y = 0)
predict_shot_success(x = -40, y = 20)
predict_shot_success(x = -1000, y = 20)
footballData <- readRDS("pbp2014-2024.rds")
footballData <- readRDS("C:/Users/luked/Downloads/pbp2014-2024.rds")
head(footballData)
data <- readRDS("C:/Users/luked/Downloads/pbp2014-2024.rds")
head(data)
names(data)
data$receiver_id
data$passer_id
names(data)
# run_play.R
source("predict_field_goal.R")      # Provides predict_field_goal()
setwd("C:/Users/luked/Repositories/TeamStarbucks")
# run_play.R
source("predict_field_goal.R")      # Provides predict_field_goal()
source("predict_fourth_down.R")      # Provides predict_fourth_down()
source("layer_player_position.R")
source("layer_run_pass.R")
source("layer_fumble.R")
source("layer_interception.R")
source("layer_incompletion.R")
source("layer_yards_gained.R")
simulate_fourth_down <- function(ytg, fp) {
fourth_down_probs <- predict_fourth_down(fp, ytg)
play_types <- c("FG", "GFI", "PUNT")
play_choice <- sample(play_types, size = 1, prob = fourth_down_probs)
if (play_choice == "FG") {
kick_distance <- (100 - fp) + 10
fg_prob <- predict_field_goal(kick_distance)
if (runif(1) < fg_prob) {
return(list(down = NA, ytg = NA, fp = 115, exit_drive = 1, event = "FG_made"))
} else {
return(list(down = NA, ytg = NA, fp = fp, exit_drive = 1, event = "FG_missed"))
}
} else if (play_choice == "PUNT") {
if (runif(1) < 0.9) {
return(list(down = NA, ytg = NA, fp = fp, exit_drive = 1, event = "PUNT"))
} else {
new_fp <- fp + 5
if (new_fp >= 100) {
return(list(down = NA, ytg = NA, fp = 105, exit_drive = 1, event = "TD"))
}
return(list(down = 1, ytg = 10, fp = new_fp, exit_drive = 0, event = "PUNT_mishandled"))
}
} else if (play_choice == "GFI") {
conversion_prob <- ifelse(ytg <= 2, 0.7, 0.3)
if (runif(1) < conversion_prob) {
yg <- sample(ytg:15, 1)
new_fp <- fp + yg
if (new_fp >= 100) {
return(list(down = NA, ytg = NA, fp = 105, exit_drive = 1, event = "TD"))
}
return(list(down = 1, ytg = 10, fp = new_fp, exit_drive = 0, event = "GFI_success"))
} else {
return(list(down = NA, ytg = NA, fp = fp, exit_drive = 1, event = "GFI_failure"))
}
}
}
simulate_play <- function(state) {
# state: list(down, ytg, fp, red_zone)
if (state$down == 4) {
return(simulate_fourth_down(state$ytg, state$fp))
}
# Create a dummy play record.
play <- data.frame(
play_type = ifelse(state$down < 4, "run", "pass"),
pass_location = sample(c("left", "middle", "right"), 1),
pass_length = sample(c("short", "deep"), 1),
rusher_player_id = sample(c("id1", "id2", ""), 1),
passer_player_id = sample(c("id3", "id4", ""), 1),
receiver_player_id = sample(c("id5", "id6", ""), 1),
stringsAsFactors = FALSE
)
# 1. Determine player position.
play <- assign_player_position(play)
# 2. Decide run vs. pass.
play <- assign_run_pass(play)
play_call <- play$play_call
player_position <- play$player_position
# 3. Check terminal events.
if (simulate_fumble(play_call, player_position)) {
return(list(state = state, event = "FUMBLE", yards = 0))
}
if (play_call == "pass") {
if (simulate_interception(play_call)) {
return(list(state = state, event = "INTERCEPTION", yards = 0))
}
if (simulate_incompletion(play_call)) {
new_state <- list(
down = state$down + 1,
ytg = state$ytg,
fp = state$fp,
red_zone = state$red_zone
)
return(list(state = new_state, event = "INCOMPLETION", yards = 0))
}
}
# 4. Now we are in a leaf defined by (player_position, play_call, red_zone)
yards <- sample_yards_gained(play_call, player_position, state$red_zone)
new_fp <- state$fp + yards
# 5. Check for touchdown.
if (new_fp >= 100) {
new_state <- list(down = NA, ytg = NA, fp = 105, red_zone = state$red_zone)
return(list(state = new_state, event = "TD", yards = yards))
}
# 6. Update drive state.
new_ytg <- max(0, state$ytg - yards)
new_down <- ifelse(new_ytg == 0, 1, state$down + 1)
if (new_ytg == 0) new_ytg <- 10
new_state <- list(
down = new_down,
ytg = new_ytg,
fp = new_fp,
red_zone = state$red_zone
)
return(list(state = new_state, event = "play", yards = yards))
}
run_play <- function(state) {
result <- simulate_play(state)
return(result)
}
# Example Simulation Call:
init_state <- list(
down = 1,
ytg = 10,
fp = 25,
red_zone = FALSE  # set TRUE when field position indicates red zone (e.g., fp <= 20)
)
result <- run_play(init_state)
print(result)
# examine_leaf_distribution.R
library(ggplot2)
# leaf is defined by play_call, player_position, red_zone
examine_leaf_distribution <- function(play_call, player_position, red_zone = FALSE) {
footballData <- readRDS("C:/Users/luked/Downloads/pbp2014-2024.rds")
footballData <- assign_player_position(footballData)
subsetData <- footballData[footballData$play_type == play_call &
footballData$player_position == player_position, ]
if (red_zone) {
subsetData <- subsetData[subsetData$yardline_100 <= 20, ]
} else {
subsetData <- subsetData[subsetData$yardline_100 > 20, ]
}
subsetData <- subsetData[!is.na(subsetData$yards_gained), ]
if(nrow(subsetData) < 30){
message("Too few observations for this leaf; using all plays of type ", play_call)
subsetData <- footballData[footballData$play_type == play_call, ]
subsetData <- subsetData[!is.na(subsetData$yards_gained), ]
}
if(nrow(subsetData) == 0){
stop("No data available for this leaf.")
}
p <- ggplot(subsetData, aes(x = yards_gained)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = paste("Density for", play_call, "plays by", player_position,
ifelse(red_zone, "in Red Zone", "in Non-Red Zone")),
x = "Yards Gained", y = "Density")
print(p)
fit <- Mclust(subsetData$yards_gained, G = 1:3, verbose = FALSE)
print(summary(fit))
return(fit)
}
fit_leaf <- examine_leaf_distribution("run", "hb", red_zone = FALSE)
