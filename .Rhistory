library(nnet)
# Check if cached model exists
cache_file <- "multinom_model.rds"
if (file.exists(cache_file)) {
multinom_model <- readRDS(cache_file)
cat("Loaded cached multinom_model from", cache_file, "\n")
} else {
# Read raw data and build the fourth down data subset.
footballData <- readRDS("pbp2014-2024.rds")
fourthDownData <- footballData[footballData$down == 4 &
footballData$play_type %in% c("pass", "run", "field_goal", "punt"), ]
fourthDownData$fourth_down_options <- factor(
if_else(fourthDownData$play_type == "field_goal", "FG",
if_else(fourthDownData$play_type == "punt", "PUNT", "GFI")),
levels = c("FG", "GFI", "PUNT")
)
# Optimize the multinomial regression model.
multinom_model <- multinom(fourth_down_options ~ yardline_100 + ydstogo, data = fourthDownData)
# Save the model to disk for future use.
saveRDS(multinom_model, file = cache_file)
cat("Saved multinom_model to", cache_file, "\n")
}
predict_fourth_down <- function(fp, ytg) {
# Note: we assume that the input fp is on the same scale as used in the model (i.e. yardline_100 = 100 - fp).
predictions <- predict(multinom_model,
newdata = data.frame(yardline_100 = 100 - fp, ydstogo = ytg),
type = "probs")
return(predictions)
}
# run_drive.R
source("run_play.R")
run_drive <- function(D, YTG, FP, play_history = list()) {
# Determine red zone from yardline_100 = 100 - FP.
red_zone <- (100 - FP) <= 20
new_state <- run_play(D, YTG, FP, red_zone, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
result <- run_drive(1, 10, 85)
print(result)
result <- run_drive(1, 10, 85)
print(result)
result <- run_drive(1, 10, 85)
print(result)
run_drive(1, 10, 85)
run_drive(1, 10, 85)
run_drive(1, 10, 85)
run_drive(1, 10, 60)
run_drive(1, 10, 70)
run_drive(1, 10, 70)
run_drive(4, 10, 65)
run_drive(4, 10, 65)
run_drive(4, 10, 65)
run_drive(4, 10, 65)
run_drive(4, 10, 65)
run_drive(4, 10, 65)
run_drive(4, 10, 65)
run_drive(4, 10, 65)
run_drive(4, 10, 65)
run_drive(4, 10, 65)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 40)
run_drive(4, 10, 5)
run_drive(4, 10, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 5)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 99)
run_drive(4, 1, 5)
raw_data$punt_inside_twenty
which(raw_data$punt_inside_twenty == 1)
38    68    74   111   122
raw_data$yardline_100[38,]
raw_data$yardline_100[38]
raw_data$yardline_100[68]
which(raw_data$punt_attempt == 1)
[1]     6    30    38    68    74   111   118   122   163   179   186   197   222   228   232   261   267   285   307   324   361   367   371
raw_data$yardline_100[6]
raw_data$yardline_100[30]
raw_data$yardline_100[38]
raw_data$yardline_100[74]
raw_data$yardline_100[118]
which(raw_data$punt_inside_twenty == 1)
which(raw_data$punt_attempt == 1)
# run_drive.R
source("run_play.R")
run_drive <- function(D, YTG, FP, play_history = list()) {
# Determine red zone from yardline_100 = 100 - FP.
red_zone <- (100 - FP) <= 20
new_state <- run_play(D, YTG, FP, red_zone, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
# Example runs:
result <- run_drive(1, 10, 20)
print(result)
run_drive(1, 10, 85)
run_drive(1, 10, 85)
run_drive(1, 10, 85)
run_drive(1, 10, 15)
run_drive(1, 10, 15)
run_drive(1, 10, 15)
run_drive(1, 10, 15)
run_drive(1, 10, 15)
run_drive(1, 10, 15)
run_drive(1, 10, 15)
run_drive(4, 10, 15)
run_drive(4, 10, 15)
run_drive(4, 10, 15)
run_drive(4, 10, 5)
run_drive(4, 10, 5)
run_drive(4, 10, 5)
run_drive(4, 10, 5)
run_drive(4, 10, 5)
run_drive(4, 10, 5)
run_drive(4, 10, 5)
which(raw_data$punt_attempt == 1)
raw_data$yards_gained[6]
raw_data[6,]
raw_data$kick_distance[6]
raw_data$play[6]
raw_data$play_id[6]
raw_data$play_type[6]
raw_data$kick_distance[13426]
# run_drive.R
source("run_play.R")
run_drive <- function(D, YTG, FP, play_history = list()) {
# Determine red zone from yardline_100 = 100 - FP.
red_zone <- (100 - FP) <= 20
new_state <- run_play(D, YTG, FP, red_zone, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
run_drive(1, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(4, 10, 85)
run_drive(3, 10, 85)
run_drive(3, 10, 85)
run_drive(3, 10, 85)
run_drive(3, 3, 85)
run_drive(3, 3, 85)
run_drive(4, 3, 25)
run_drive(4, 3, 25)
run_drive(4, 3, 25)
run_drive(4, 3, 25)
run_drive(4, 3, 50)
run_drive(4, 3, 50)
run_drive(4, 3, 50)
run_drive(4, 3, 50)
# run_drive.R
source("run_play.R")
run_drive <- function(D, YTG, FP, play_history = list()) {
# Determine red zone from yardline_100 = 100 - FP.
red_zone <- (100 - FP) <= 20
new_state <- run_play(D, YTG, FP, red_zone, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
run_drive(1, 10, 20)
run_drive(4, 10, 20)
run_drive(3, 10, 20)
run_drive(3, 10, 20)
run_drive(3, 10, 20)
run_drive(3, 10, 20)
run_drive(3, 10, 20)
run_drive(3, 10, 20)
run_drive(2, 5, 20)
run_drive(2, 5, 20)
run_drive(2, 5, 67)
run_drive(2, 5, 67)
run_drive(2, 5, 67)
run_drive(2, 5, 67)
run_drive(2, 5, 67)
run_drive(2, 5, 67)
run_drive(2, 5, 67)
run_drive(2, 5, 67)
run_drive(2, 5, 67)
run_drive(2, 5, 67)
# get_EP.R
source("run_epoch.R")
get_EP <- function(down, ytg, fp, max_drives, n) {
total_points <- 0
for (i in 1:n) {
total_points <- total_points + run_epoch(down, ytg, fp, max_drives)
}
return(total_points / n)
}
compare_ep_by_rate <- function(down, ytg, fp, max_drives, n, rates = seq(0, 0.5, by = 0.05)) {
results <- data.frame(Rate = numeric(0), EP = numeric(0))
for (r in rates) {
assign("UNEXPECTED_RATE", r, envir = .GlobalEnv)
ep_val <- get_EP(down, ytg, fp, max_drives, n)
results <- rbind(results, data.frame(Rate = r, EP = ep_val))
cat("Rate:", r, "EP:", ep_val, "\n")
}
return(results)
}
seq(0, 0.5, by = 0.05)
1 - exp(-.1 * 5)
1 - exp(-.1 * 7)
1 - exp(-.1 * 7)
1 - exp(-.5 * 7)
1 - exp(-.3 * 7)
1 - exp(-.3 * 3)
1 - exp(-.05 * 2)
1 - exp(-.2 * 2)
1 - exp(-.2 * 4)
compare_ep_by_rate <- function(down, ytg, fp, max_drives, n, rates = seq(0, 0.25, by = 0.25)) {
results <- data.frame(Rate = numeric(0), EP = numeric(0))
for (r in rates) {
assign("UNEXPECTED_RATE", r, envir = .GlobalEnv)
ep_val <- get_EP(down, ytg, fp, max_drives, n)
results <- rbind(results, data.frame(Rate = r, EP = ep_val))
cat("Rate:", r, "EP:", ep_val, "\n")
}
return(results)
}
# Testing the comparison function:
compare_ep_by_rate(1, 10, 63, 10, 5)
# Testing the comparison function:
compare_ep_by_rate(1, 10, 34, 10, 5)
compare_ep_across_states <- function(game_states, max_drives, n, rates = seq(0, 0.25, by = 0.25)) {
results <- data.frame(Rate = numeric(0), EP = numeric(0))
for (r in rates) {
# Set the global unexpected rate parameter.
assign("UNEXPECTED_RATE", r, envir = .GlobalEnv)
# For each game state in the list, compute EP.
ep_values <- sapply(game_states, function(state) {
get_EP(state$down, state$ytg, state$fp, max_drives, n)
})
avg_ep <- mean(ep_values)
results <- rbind(results, data.frame(Rate = r, EP = avg_ep))
cat("Rate:", r, "Average EP:", avg_ep, "\n")
}
return(results)
}
compare_ep_across_states(game_states, max_drives = 10, n = 15)
compare_ep_across_states <- function(game_states, max_drives, n, rates = seq(0, 0.25, by = 0.25)) {
results <- data.frame(Rate = numeric(0), EP = numeric(0))
for (r in rates) {
assign("UNEXPECTED_RATE", r, envir = .GlobalEnv)
ep_values <- sapply(game_states, function(state) {
get_EP(state$down, state$ytg, state$fp, max_drives, n)
})
avg_ep <- mean(ep_values)
results <- rbind(results, data.frame(Rate = r, EP = avg_ep))
cat("Rate:", r, "Average EP:", avg_ep, "\n")
}
return(results)
}
game_states <- list(
list(down = 1, ytg = 10, fp = 63),
list(down = 2, ytg = 7, fp = 34),
list(down = 1, ytg = 10, fp = 85)
)
compare_ep_across_states(game_states, max_drives = 10, n = 15)
cat("Final field position (fp):", fp, ", drives:", cumulative_drives, ", team_status:", team_status, ", score:", score, "\n")
if (file.exists(cache_file)) {
multinom_model <- readRDS(cache_file)
}
else {
if (file.exists(cache_file)) {
multinom_model <- readRDS(cache_file)
}
else {
if (file.exists(cache_file)) {
multinom_model <- readRDS(cache_file)
}
else {
if (file.exists(cache_file)) {
multinom_model <- readRDS(cache_file)
} else {
footballData <- readRDS("pbp2014-2024.rds")
fourthDownData <- footballData[footballData$down == 4 & footballData$play_type %in% c("pass", "run", "field_goal", "punt"), ]
fourthDownData$fourth_down_options <- factor(
if_else(fourthDownData$play_type == "field_goal", "FG", if_else(fourthDownData$play_type == "punt", "PUNT", "GFI")),
levels = c("FG", "GFI", "PUNT")
)
multinom_model <- multinom(fourth_down_options ~ yardline_100 + ydstogo, data = fourthDownData)
saveRDS(multinom_model, file = cache_file)
cat("saved multinom_model to", cache_file, "\n")
}
source("run_epoch.R")
get_EP <- function(down, ytg, fp, max_drives, n) {
total_points <- 0
for (i in 1:n) {
total_points <- total_points + run_epoch(down, ytg, fp, max_drives)
}
return(total_points / n)
}
compare_ep_by_rate <- function(down, ytg, fp, max_drives, n, rates = seq(0, 0.25, by = 0.25)) {
results <- data.frame(Rate = numeric(0), EP = numeric(0))
for (r in rates) {
assign("UNEXPECTED_RATE", r, envir = .GlobalEnv)
ep_val <- get_EP(down, ytg, fp, max_drives, n)
results <- rbind(results, data.frame(Rate = r, EP = ep_val))
cat("Rate:", r, "EP:", ep_val, "\n")
}
return(results)
}
compare_ep_across_states <- function(game_states, max_drives, n, rates = seq(0, 0.25, by = 0.25)) {
results <- data.frame(Rate = numeric(0), EP = numeric(0))
for (r in rates) {
assign("UNEXPECTED_RATE", r, envir = .GlobalEnv)
ep_values <- sapply(game_states, function(state) {
get_EP(state$down, state$ytg, state$fp, max_drives, n)
})
avg_ep <- mean(ep_values)
results <- rbind(results, data.frame(Rate = r, EP = avg_ep))
cat("Rate:", r, "Average EP:", avg_ep, "\n")
}
return(results)
}
game_states <- list(
list(down = 1, ytg = 10, fp = 63),
list(down = 2, ytg = 7, fp = 34),
list(down = 1, ytg = 10, fp = 85)
)
get_EP(1, 10, 63, 10, 5)
get_EP(1, 10, 63, 10, 5)
run_epoch <- function(down, ytg, fp, max_drives = 10) {
team_status <- -1
cumulative_drives <- 0
if (!is.na(fp) && fp > 100) {
no_score <- FALSE
}
else {
no_score <- TRUE
}
cat("Starting epoch simulation with state: down =", down, ", ytg =", ytg, ", fp =", fp, "\n")
while(no_score && cumulative_drives < max_drives) {
team_status <- team_status * -1
cumulative_drives <- cumulative_drives + 1
cat("drive", cumulative_drives, ": starting state of down =", down, ", ytg =", ytg, ", fp =", fp, ", team_status =", team_status, "\n")
tmp_state <- run_drive(down, ytg, fp)
if (!is.na(tmp_state$FP) && tmp_state$FP > 100) {
down <- NA
ytg <- NA
fp <- tmp_state$FP
no_score <- FALSE
cat("drive ended with scoring event:", tmp_state$event, "\n")
}
else {
down <- 1
ytg <- 10
fp <- tmp_state$FP
no_score <- TRUE
cat("drive ended with non-scoring event:", tmp_state$event, "\n")
}
}
score <- team_status * compute_score(fp)
cat("Final field position (fp):", fp, ", drives:", cumulative_drives, ", team_status:", team_status, ", score:", score, "\n")
return(score)
}
get_EP(1, 10, 63, 10, 5)
run_epoch <- function(down, ytg, fp, max_drives = 10) {
team_status <- -1
cumulative_drives <- 0
if (!is.na(fp) && fp > 100) {
no_score <- FALSE
}
else {
no_score <- TRUE
}
cat("starting epoch simulation with state: down =", down, ", ytg =", ytg, ", fp =", fp, "\n")
while(no_score && cumulative_drives < max_drives) {
team_status <- team_status * -1
cumulative_drives <- cumulative_drives + 1
cat("drive", cumulative_drives, ": starting state of down =", down, ", ytg =", ytg, ", fp =", fp, ", team_status =", team_status, "\n")
tmp_state <- run_drive(down, ytg, fp)
if (!is.na(tmp_state$FP) && tmp_state$FP > 100) {
down <- NA
ytg <- NA
fp <- tmp_state$FP
no_score <- FALSE
cat("drive ended with scoring event:", tmp_state$event, "\n")
}
else {
down <- 1
ytg <- 10
fp <- tmp_state$FP
no_score <- TRUE
cat("drive ended with non-scoring event:", tmp_state$event, "\n")
}
}
score <- team_status * compute_score(fp)
cat("final field position (fp):", fp, ", drives:", cumulative_drives, ", team_status:", team_status, ", score:", score, "\n")
return(score)
}
get_EP(1, 10, 47, 10, 5)
