}
precompute_unexpected_distributions()
precompute_unexpected_distributions <- function() {
raw_data <- readRDS("pbp2014-2024.rds")
unexpected_data <- raw_data %>%
group_by(game_id, drive) %>%
mutate(
prev_plays = lag(play_type, 3),
run_streak = rollapplyr(play_type == "run", width = 3, FUN = all, fill = NA),
pass_streak = rollapplyr(play_type == "pass", width = 3, FUN = all, fill = NA)
) %>%
filter(
(run_streak & play_type == "pass") |
(pass_streak & play_type == "run")
) %>%
ungroup()
saveRDS(unexpected_data, "unexpected_plays_data.rds")
}
library(ggplot2)
library(mclust)
library(dplyr)
library(purrr)
precompute_unexpected_distributions()
setwd("C:/Users/luked/Repositories/TeamStarbucks")
precompute_unexpected_distributions()
result <- run_drive(1, 10, 80)
source("run_play.R")
classify_drive_tendency <- function(play_history) {
if (length(play_history) < 3) return("neutral")
play_types <- sapply(play_history, function(x) x$play_type)
run_prop <- mean(play_types == "run")
case_when(
run_prop > 0.7 ~ "run_heavy",
run_prop < 0.3 ~ "pass_heavy",
TRUE ~ "balanced"
)
}
# Add expected play type detector
get_expected_play_type <- function(down, ytg) {
if (down == 3 && ytg > 5) return("pass")
if (ytg <= 2) return("run")
if (down == 4) return("pass") # Valid?
"run"
}
run_drive <- function(D, YTG, FP, play_history = list()) {
# Simulate play with history
new_state <- run_play(D, YTG, FP, play_history)
# Update play history with current play
updated_history <- append(play_history, list(
list(down = D, ytg = YTG, fp = FP, play_type = new_state$play_type)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(D = new_state$down, YTG = new_state$ytg,
FP = new_state$fp, event = new_state$event)
}
}
source("run_play.R")
source("run_play.R")
run_drive <- function(D, YTG, FP, play_history = list()) {
# Simulate play with history
new_state <- run_play(D, YTG, FP, play_history)
# Update play history with current play
updated_history <- append(play_history, list(
list(down = D, ytg = YTG, fp = FP, play_type = new_state$play_type)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(D = new_state$down, YTG = new_state$ytg,
FP = new_state$fp, event = new_state$event)
}
}
# Add helper function to classify drive tendency
classify_drive_tendency <- function(play_history) {
if (length(play_history) < 3) return("neutral")
play_types <- sapply(play_history, function(x) x$play_type)
run_prop <- mean(play_types == "run")
case_when(
run_prop > 0.7 ~ "run_heavy",
run_prop < 0.3 ~ "pass_heavy",
TRUE ~ "balanced"
)
}
# Add expected play type detector
get_expected_play_type <- function(down, ytg) {
if (down == 3 && ytg > 5) return("pass")
if (ytg <= 2) return("run")
if (down == 4) return("pass") # Valid?
"run"
}
result <- run_drive(1, 10, 80)
result <- run_drive(1, 10, 80)
library(zoo)
library(dplyr)
precompute_unexpected_distributions <- function(window_size = 5, threshold = 0.8) {
raw_data <- readRDS("pbp2014-2024.rds") %>%
filter(play_type %in% c("run", "pass")) %>%
group_by(game_id, drive) %>%
mutate(
run_ratio = rollapplyr(play_type == "run",
width = window_size,
FUN = function(x) sum(x)/length(x),
fill = NA),
pass_ratio = rollapplyr(play_type == "pass",
width = window_size,
FUN = function(x) sum(x)/length(x),
fill = NA),
unexpected_run = play_type == "run" & lag(pass_ratio) >= threshold,
unexpected_pass = play_type == "pass" & lag(run_ratio) >= threshold
) %>%
ungroup() %>%
filter(unexpected_run | unexpected_pass) %>%
select(-run_ratio, -pass_ratio)
# Include all outcomes (turnovers, completions etc)
saveRDS(raw_data, "unexpected_plays_data.rds")
}
# Initialize with 5-play window and 80% threshold
precompute_unexpected_distributions()
precompute_unexpected_distributions()
gc()
gc()
gc()
run_drive <- function(D, YTG, FP, play_history = list()) {
new_state <- run_play(D, YTG, FP, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
classify_drive_tendency <- function(play_history) {
if (length(play_history) < 3) return("neutral")
# Consider last 5 plays with weighted average
n_plays <- min(5, length(play_history))
weights <- rev(seq(0.5, 1, length.out = n_plays)) # Recent plays weighted higher
play_types <- tail(sapply(play_history, function(x) x$play_type), n_plays)
run_score <- sum(weights[play_types == "run"])/sum(weights)
pass_score <- sum(weights[play_types == "pass"])/sum(weights)
case_when(
run_score > 0.65 ~ "run_heavy",
pass_score > 0.65 ~ "pass_heavy",
TRUE ~ "balanced"
)
}
get_expected_play_type <- function(down, ytg, fp) {
base_exp <- case_when(
down == 3 && ytg > 5 ~ "pass",
ytg <= 2 ~ "run",
down == 4 ~ "pass",
fp >= 75 ~ "pass", # More aggressive in scoring position
TRUE ~ "run"
)
# Adjust for red zone
if (fp >= 80) {
if (ytg <= 3) return("run")
return("pass_short")
}
base_exp
}
result <- run_drive(1, 10, 80)
source("run_play.R")
result <- run_drive(1, 10, 80)
run_drive <- function(D, YTG, FP, play_history = list()) {
new_state <- run_play(D, YTG, FP, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
classify_drive_tendency <- function(play_history) {
if (length(play_history) < 3) return("neutral")
# Consider last 5 plays with weighted average
n_plays <- min(5, length(play_history))
weights <- rev(seq(0.5, 1, length.out = n_plays)) # Recent plays weighted higher
play_types <- tail(sapply(play_history, function(x) x$play_type), n_plays)
run_score <- sum(weights[play_types == "run"])/sum(weights)
pass_score <- sum(weights[play_types == "pass"])/sum(weights)
case_when(
run_score > 0.65 ~ "run_heavy",
pass_score > 0.65 ~ "pass_heavy",
TRUE ~ "balanced"
)
}
get_expected_play_type <- function(down, ytg, fp) {
base_exp <- case_when(
down == 3 && ytg > 5 ~ "pass",
ytg <= 2 ~ "run",
down == 4 ~ "pass",
fp >= 75 ~ "pass", # More aggressive in scoring position
TRUE ~ "run"
)
# Adjust for red zone
if (fp >= 80) {
if (ytg <= 3) return("run")
return("pass_short")
}
base_exp
}
result <- run_drive(1, 10, 80)
run_drive <- function(D, YTG, FP, play_history = list()) {
# Calculate red_zone based on field position (opponent's 20-yard line)
red_zone <- (100 - FP) <= 20
new_state <- run_play(D, YTG, FP, red_zone, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
classify_drive_tendency <- function(play_history) {
if (length(play_history) < 3) return("neutral")
# Consider last 5 plays with weighted average
n_plays <- min(5, length(play_history))
weights <- rev(seq(0.5, 1, length.out = n_plays)) # Recent plays weighted higher
play_types <- tail(sapply(play_history, function(x) x$play_type), n_plays)
run_score <- sum(weights[play_types == "run"])/sum(weights)
pass_score <- sum(weights[play_types == "pass"])/sum(weights)
case_when(
run_score > 0.65 ~ "run_heavy",
pass_score > 0.65 ~ "pass_heavy",
TRUE ~ "balanced"
)
}
get_expected_play_type <- function(down, ytg, fp) {
base_exp <- case_when(
down == 3 && ytg > 5 ~ "pass",
ytg <= 2 ~ "run",
down == 4 ~ "pass",
fp >= 75 ~ "pass", # More aggressive in scoring position
TRUE ~ "run"
)
# Adjust for red zone
if (fp >= 80) {
if (ytg <= 3) return("run")
return("pass_short")
}
base_exp
}
source("run_play.R")
result <- run_drive(1, 10, 20)
run_drive <- function(D, YTG, FP, play_history = list()) {
# Calculate red_zone based on field position (opponent's 20-yard line)
red_zone <- (100 - FP) <= 20
new_state <- run_play(D, YTG, FP, red_zone, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
classify_drive_tendency <- function(play_history) {
if (length(play_history) < 3) return("neutral")
# Consider last 5 plays with weighted average
n_plays <- min(5, length(play_history))
weights <- rev(seq(0.5, 1, length.out = n_plays)) # Recent plays weighted higher
play_types <- tail(sapply(play_history, function(x) x$play_type), n_plays)
run_score <- sum(weights[play_types == "run"])/sum(weights)
pass_score <- sum(weights[play_types == "pass"])/sum(weights)
case_when(
run_score > 0.65 ~ "run_heavy",
pass_score > 0.65 ~ "pass_heavy",
TRUE ~ "balanced"
)
}
get_expected_play_type <- function(down, ytg, fp) {
base_exp <- case_when(
down == 3 && ytg > 5 ~ "pass",
ytg <= 2 ~ "run",
down == 4 ~ "pass",
fp >= 75 ~ "pass", # More aggressive in scoring position
TRUE ~ "run"
)
# Adjust for red zone
if (fp >= 80) {
if (ytg <= 3) return("run")
return("pass_short")
}
base_exp
}
source("run_play.R")
result <- run_drive(1, 10, 20)
source("run_play.R")
result <- run_drive(1, 10, 20)
source("run_play.R")
result <- run_drive(1, 10, 20)
print(result)
result <- run_drive(1, 10, 85)
result <- run_drive(1, 10, 85)
run_drive <- function(D, YTG, FP, play_history = list()) {
# Calculate red_zone based on field position (opponent's 20-yard line)
red_zone <- (100 - FP) <= 20
new_state <- run_play(D, YTG, FP, red_zone, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
classify_drive_tendency <- function(play_history) {
if (length(play_history) < 3) return("neutral")
# Consider last 5 plays with weighted average
n_plays <- min(5, length(play_history))
weights <- rev(seq(0.5, 1, length.out = n_plays)) # Recent plays weighted higher
play_types <- tail(sapply(play_history, function(x) x$play_type), n_plays)
run_score <- sum(weights[play_types == "run"])/sum(weights)
pass_score <- sum(weights[play_types == "pass"])/sum(weights)
case_when(
run_score > 0.65 ~ "run_heavy",
pass_score > 0.65 ~ "pass_heavy",
TRUE ~ "balanced"
)
}
get_expected_play_type <- function(down, ytg, fp) {
base_exp <- case_when(
down == 3 && ytg > 5 ~ "pass",
ytg <= 2 ~ "run",
down == 4 ~ "pass",
fp >= 75 ~ "pass", # More aggressive in scoring position
TRUE ~ "run"
)
# Adjust for red zone
if (fp >= 80) {
if (ytg <= 3) return("run")
return("pass_short")
}
base_exp
}
source("run_play.R")
result <- run_drive(1, 10, 20)
print(result)
result <- run_drive(1, 10, 85)
print(result)
result <- run_drive(1, 10, 85)
print(result)
run_drive <- function(D, YTG, FP, play_history = list()) {
# Calculate red_zone based on field position (opponent's 20-yard line)
red_zone <- (100 - FP) <= 20
new_state <- run_play(D, YTG, FP, red_zone, play_history)
updated_history <- append(play_history, list(
list(
down = new_state$down,
ytg = new_state$ytg,
fp = new_state$fp,
play_type = new_state$play_type,
event = new_state$event
)
))
if (new_state$exit_drive == 0) {
run_drive(new_state$down, new_state$ytg, new_state$fp, updated_history)
} else {
list(
D = new_state$down,
YTG = new_state$ytg,
FP = new_state$fp,
event = new_state$event,
history = updated_history
)
}
}
classify_drive_tendency <- function(play_history) {
if (length(play_history) < 3) return("neutral")
# Consider last 5 plays with weighted average
n_plays <- min(5, length(play_history))
weights <- rev(seq(0.5, 1, length.out = n_plays)) # Recent plays weighted higher
play_types <- tail(sapply(play_history, function(x) x$play_type), n_plays)
run_score <- sum(weights[play_types == "run"])/sum(weights)
pass_score <- sum(weights[play_types == "pass"])/sum(weights)
case_when(
run_score > 0.65 ~ "run_heavy",
pass_score > 0.65 ~ "pass_heavy",
TRUE ~ "balanced"
)
}
get_expected_play_type <- function(down, ytg, fp) {
base_exp <- case_when(
down == 3 && ytg > 5 ~ "pass",
ytg <= 2 ~ "run",
down == 4 ~ "pass",
fp >= 75 ~ "pass", # More aggressive in scoring position
TRUE ~ "run"
)
# Adjust for red zone
if (fp >= 80) {
if (ytg <= 3) return("run")
return("pass_short")
}
base_exp
}
source("run_play.R")
result <- run_drive(1, 10, 20)
print(result)
stopifnot(all(result$history %>% map_lgl(~!is.na(.x$fp))))
result$history
stopifnot(all(result$history %>% map_lgl(~!is.na(.x$fp))))
print(result)
print(result)
# Multinomial regression library
library(nnet)
# Load dataset
footballData <- readRDS("pbp2014-2024.rds")
# Get all 4th down data matching the 3 options
fourthDownData <- footballData[footballData$down == 4 & footballData$play_type %in% c("pass", "run", "field_goal", "punt"), ]
# Make fourth_down_options a factor
fourthDownData$fourth_down_options <- factor(
ifelse(fourthDownData$play_type == "field_goal", "FG",
ifelse(fourthDownData$play_type == "punt", "PUNT", "GFI")),
levels = c("FG", "GFI", "PUNT")
)
# Fit multinomial regression model
multinom_model <- multinom(fourth_down_options ~ yardline_100 + ydstogo, data = fourthDownData)
# Function to return predicted probabilities
predict_fourth_down <- function(fp, ytg) {
# Use predict with the inputs given as the 2 predictors
predictions <- predict(multinom_model, newdata = data.frame(yardline_100 = fp, ydstogo = ytg), type = "probs")
predictions
}
# test
predict_fourth_down(67, 3)
# test
predict_fourth_down(90, 3)
# test
predict_fourth_down(5, 3)
footballData
View(footballData)
footballData$yardline_100
raw_data$fp
raw_data$yardline_100
raw_data[2,]
source("run_play.R")
result <- run_drive(1, 10, 20)
print(result)
stopifnot(all(result$history %>% map_lgl(~!is.na(.x$fp))))
result <- run_drive(1, 10, 85)
print(result)
