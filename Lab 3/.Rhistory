readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
df <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
df <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
df
games.length()
len(games)
games <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
1:length(games)
1:nrow(games)
length(unique(games$Visiting_Team))
construct <- function(df, years) {
games <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
teams <- length(unique(games$Visiting_Team)) # fix this to parse for teams
transition <- matrix(0, nrow = teams, ncol = teams)
for (i in 1:nrow(games)) {
# get team 1 and team 2
visiting_team <- games$Visiting_Team[i]
home_team <- games$Home_Team[i]
visiting_score <- games$Visiting_Score[i]
home_score <- games$Home_Score[i]
if (visiting_score > home_score) {
transition[t1][t2] = transition[t1][t2] + 1
}
else {
transition[t1][t2] = transition[t1][t2] + 1
}
}
transition <- apply(transition, 1, normalize)
}
games <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
teams <- length(unique(games$Visiting_Team)) # fix this to parse for teams
transition <- matrix(0, nrow = teams, ncol = teams)
for (i in 1:nrow(games)) {
# get team 1 and team 2
visiting_team <- games$Visiting_Team[i]
home_team <- games$Home_Team[i]
visiting_score <- games$Visiting_Score[i]
home_score <- games$Home_Score[i]
if (visiting_score > home_score) {
transition[t1][t2] = transition[t1][t2] + 1
}
else {
transition[t1][t2] = transition[t1][t2] + 1
}
}
teams <- unique(c(games$Visiting_Team, games$Home_Team))
N <- length(teams)
team_index <- setNames(1:N, teams)
transition <- matrix(0, nrow = N, ncol = N, dimnames = list(teams, teams))
for (i in 1:nrow(games)) {
# get team 1 and team 2
visiting_team <- games$Visiting_Team[i]
home_team <- games$Home_Team[i]
visiting_score <- games$Visiting_Score[i]
home_score <- games$Home_Score[i]
if (visiting_score > home_score) {
transition[t1][t2] = transition[t1][t2] + 1
}
else {
transition[t1][t2] = transition[t1][t2] + 1
}
}
games <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
teams <- unique(c(games$Visiting_Team, games$Home_Team))
N <- length(teams)
team_index <- setNames(1:N, teams)
transition <- matrix(0, nrow = N, ncol = N, dimnames = list(teams, teams))
for (i in 1:nrow(games)) {
# get team 1 and team 2
visiting_team <- games$Visiting_Team[i]
home_team <- games$Home_Team[i]
visiting_score <- games$Visiting_Score[i]
home_score <- games$Home_Score[i]
if (visiting_score < home_score) {
transition[team_index[visiting_team], team_index[home_team]] <-
transition[team_index[visiting_team], team_index[home_team]] + 1
}
else {
transition[team_index[home_team], team_index[visiting_team]] <-
transition[team_index[home_team], team_index[visiting_team]] + 1
}
}
transition <- apply(transition, 1, normalize)
View(transition)
transition <- apply(transition, 1, FUN = normalize)
t(apply(transition, 1, function(x)(x-min(x))/(max(x)-min(x))))
transition
transition <- t(apply(transition, 1, function(x)(x-min(x))/(max(x)-min(x))))
transition
transition <- apply(transition, 1, rescale, to=c(1,2))
if(!require(scales)){
install.packages("scales", dependencies=TRUE)
library(scales)
}
games <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
teams <- unique(c(games$Visiting_Team, games$Home_Team))
N <- length(teams)
team_index <- setNames(1:N, teams)
transition <- matrix(0, nrow = N, ncol = N, dimnames = list(teams, teams))
for (i in 1:nrow(games)) {
# get team 1 and team 2
visiting_team <- games$Visiting_Team[i]
home_team <- games$Home_Team[i]
visiting_score <- games$Visiting_Score[i]
home_score <- games$Home_Score[i]
if (visiting_score < home_score) {
transition[team_index[visiting_team], team_index[home_team]] <-
transition[team_index[visiting_team], team_index[home_team]] + 1
}
else {
transition[team_index[home_team], team_index[visiting_team]] <-
transition[team_index[home_team], team_index[visiting_team]] + 1
}
}
transition <- apply(transition, 1, rescale, to=c(1,2))
transition
games <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
teams <- unique(c(games$Visiting_Team, games$Home_Team))
N <- length(teams)
team_index <- setNames(1:N, teams)
transition <- matrix(0, nrow = N, ncol = N, dimnames = list(teams, teams))
for (i in 1:nrow(games)) {
# get team 1 and team 2
visiting_team <- games$Visiting_Team[i]
home_team <- games$Home_Team[i]
visiting_score <- games$Visiting_Score[i]
home_score <- games$Home_Score[i]
if (visiting_score < home_score) {
transition[team_index[visiting_team], team_index[home_team]] <-
transition[team_index[visiting_team], team_index[home_team]] + 1
}
else {
transition[team_index[home_team], team_index[visiting_team]] <-
transition[team_index[home_team], team_index[visiting_team]] + 1
}
}
transition <- apply(transition, 1, rescale, to=c(0,1))
transition
view(tranition)
View(transition)
#transition <- apply(transition, 1, rescale, to=c(0,1))
transition <- normalize.rows(transition)
if(!require(wordspace)){
install.packages("wordspace", dependencies=TRUE)
library(wordspace)
}
games <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
teams <- unique(c(games$Visiting_Team, games$Home_Team))
N <- length(teams)
team_index <- setNames(1:N, teams)
transition <- matrix(0, nrow = N, ncol = N, dimnames = list(teams, teams))
for (i in 1:nrow(games)) {
# get team 1 and team 2
visiting_team <- games$Visiting_Team[i]
home_team <- games$Home_Team[i]
visiting_score <- games$Visiting_Score[i]
home_score <- games$Home_Score[i]
if (visiting_score < home_score) {
transition[team_index[visiting_team], team_index[home_team]] <-
transition[team_index[visiting_team], team_index[home_team]] + 1
}
else {
transition[team_index[home_team], team_index[visiting_team]] <-
transition[team_index[home_team], team_index[visiting_team]] + 1
}
}
games <- readRDS("C:/Users/luked/Repositories/TeamStarbucks/data.rds")
teams <- unique(c(games$Visiting_Team, games$Home_Team))
N <- length(teams)
team_index <- setNames(1:N, teams)
transition <- matrix(0, nrow = N, ncol = N, dimnames = list(teams, teams))
for (i in 1:nrow(games)) {
# get team 1 and team 2
visiting_team <- games$Visiting_Team[i]
home_team <- games$Home_Team[i]
visiting_score <- games$Visiting_Score[i]
home_score <- games$Home_Score[i]
if (visiting_score < home_score) {
transition[team_index[visiting_team], team_index[home_team]] <-
transition[team_index[visiting_team], team_index[home_team]] + 1
}
else {
transition[team_index[home_team], team_index[visiting_team]] <-
transition[team_index[home_team], team_index[visiting_team]] + 1
}
}
#transition <- apply(transition, 1, rescale, to=c(0,1))
transition <- normalize.rows(transition)
transition
View(transition)
gold_coin_results
# Load necessary libraries
library(dplyr)
# Read data and construct the transition matrix
game_data <- readRDS("data.rds")
# Read data and construct the transition matrix
game_data <- readRDS("data.rds")
setwd("C:/Users/luked/Repositories/TeamStarbucks/Lab 3")
# Read data and construct the transition matrix
game_data <- readRDS("data.rds")
transition_matrix <- construct(game_data)
source("create_transition.R")
# Load necessary libraries
library(dplyr)
# Read data and construct the transition matrix
game_data <- readRDS("data.rds")
transition_matrix <- construct(game_data)
# Number of teams
num_teams <- nrow(transition_matrix)
transition_matrix <- construct(game_data)
game_data
transition_matrix <- construct(game_data, NULL)
transition_matrix <- construct(game_data, NULL)
source("create_transition.R")
# Load necessary libraries
library(dplyr)
# Read data and construct the transition matrix
game_data <- readRDS("data.rds")
transition_matrix <- construct(game_data, NULL)
source("create_transition.R")
# Load necessary libraries
library(dplyr)
# Read data and construct the transition matrix
game_data <- readRDS("data.rds")
transition_matrix <- construct(game_data, NULL)
View(construct)
View(transition_matrix)
source("create_transition.R")
# Load necessary libraries
library(dplyr)
# Read data and construct the transition matrix
game_data <- readRDS("data.rds")
transition_matrix <- construct(game_data, NULL)
View(transition_matrix)
# Number of teams
num_teams <- nrow(transition_matrix)
# Gold Coin Simulation
set.seed(42)  # Ensure reproducibility
num_steps <- 20000  # Total transitions
burn_in <- 1000  # Burn-in period
# Start with a randomly selected team
current_team <- sample(1:num_teams, 1)
coin_counts <- numeric(num_teams)
for (step in 1:num_steps) {
# Choose next team based on transition probabilities
current_team <- sample(1:num_teams, 1, prob = transition_matrix[current_team, ])
# Only count occurrences after burn-in period
if (step > burn_in) {
coin_counts[current_team] <- coin_counts[current_team] + 1}
}
# Normalize the coin counts to get probabilities
gold_coin_ranking <- coin_counts / sum(coin_counts)
gold_coin_results <- data.frame(Team = rownames(transition_matrix), PageRank_Score = gold_coin_ranking)
gold_coin_results <- gold_coin_results %>% arrange(desc(PageRank_Score))
gold_coin_results
# Start with uniform distribution
b <- rep(1 / num_teams, num_teams)
for (i in 1:10000) {
b <- b %*% transition_matrix
}
steady_state_results <- data.frame(Team = rownames(transition_matrix), PageRank_Score = as.vector(b))
steady_state_results <- steady_state_results %>% arrange(desc(PageRank_Score))
steady_state_results
steady_state_ranking <- as.vector(b)
steady_state_results <- data.frame(Team = rownames(transition_matrix), PageRank_Score = steady_state_ranking)
steady_state_results <- steady_state_results %>% arrange(desc(PageRank_Score))
steady_state_results
transition_matrix <- function(game_data) {
# Get list of unique teams
teams <- unique(c(game_data$Visiting_Team, game_data$Home_Team))
n <- length(teams)
# Initialize a loss matrix with zero counts
loss_matrix <- matrix(0, nrow = n, ncol = n, dimnames = list(teams, teams))
# Process each game (add a loss for the losing team against the winning team)
for (i in 1:nrow(game_data)) {
visiting_team <- game_data$Visiting_Team[i]
home_team <- game_data$Home_Team[i]
visiting_score <- game_data$Visiting_Score[i]
home_score <- game_data$Home_Score[i]
# Home team won
if (visiting_score < home_score) {
loss_matrix[visiting_team, home_team] <- loss_matrix[visiting_team, home_team] + 1
}
# Away team won
else {
loss_matrix[home_team, visiting_team] <- loss_matrix[home_team, visiting_team] + 1
}
}
row_sums <- rowSums(loss_matrix)
loss_matrix <- sweep(loss_matrix, 1, row_sums, FUN = "/")
# Replace divisions by 0 with 0
loss_matrix[is.na(loss_matrix)] <- 0
# Normalize the matrix for transition probabilities
#loss_matrix <- loss_matrix / rowSums(loss_matrix)
# Replace NA with 0 for teams that never lost
#loss_matrix[is.na(loss_matrix)] <- 0
loss_matrix
}
game_data <- readRDS("data.rds")
tm <- transition_matrix(game_data)
print(tm)
view(tm)
View(tm)
rowSums(tm)
seasons <- sort(unique(game_data$season))
yearly_rankings <- list()
# Construct the transition matrix for the current season
tm <- construct(game_data, years = yr)
for (yr in seasons) {
# Construct the transition matrix for the current season
tm <- construct(game_data, years = yr)
# Check the number of teams in this season (should be the same overall but just in case)
num_teams_yr <- nrow(tm)
# Compute the steady state using the iterative method
b <- rep(1 / num_teams_yr, num_teams_yr)
num_iterations <- 10000
for (i in 1:num_iterations) {
b <- b %*% tm
}
# Save the ranking for the current season
ranking_yr <- data.frame(Team = rownames(tm),
PageRank_Score = as.vector(b))
ranking_yr <- ranking_yr[order(-ranking_yr$PageRank_Score), ]
yearly_rankings[[as.character(yr)]] <- ranking_yr
}
# For demonstration, print the rankings for the most recent season.
recent_year <- tail(seasons, 1)
print(paste("Team rankings for the season", recent_year))
print(yearly_rankings[[as.character(recent_year)]])
combined_rankings <- do.call(rbind, lapply(names(yearly_rankings), function(season_str) {
df <- yearly_rankings[[season_str]]
df <- df %>%
arrange(desc(PageRank_Score)) %>% # descending order: best team at top
mutate(rank = row_number(), # assign rank based on ordering
season = as.integer(season_str))
return(df)
}))
# Examine the combined data frame
head(combined_rankings)
# Create a plot where each team's ranking over the years is shown.
p <- ggplot(combined_rankings, aes(x = season, y = rank, group = Team, color = Team)) +
geom_line(size = 1) +
geom_point() +
scale_y_reverse(breaks = 1:max(combined_rankings$rank)) + # use scale_y_reverse() to have rank 1 at the top.
labs(title = "Season-to-Season MLB Team Rankings (Steady-State PageRank)",
x = "Season",
y = "Ranking (1 = Best)") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5))
library(ggplot2)
# Create a plot where each team's ranking over the years is shown.
p <- ggplot(combined_rankings, aes(x = season, y = rank, group = Team, color = Team)) +
geom_line(size = 1) +
geom_point() +
scale_y_reverse(breaks = 1:max(combined_rankings$rank)) + # use scale_y_reverse() to have rank 1 at the top.
labs(title = "Season-to-Season MLB Team Rankings (Steady-State PageRank)",
x = "Season",
y = "Ranking (1 = Best)") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5))
# Print the plot
print(p)
p
# 1. Compute the standard deviation and range of ranks for each team
team_fluctuations <- combined_rankings %>%
group_by(Team) %>%
summarise(mean_rank = mean(rank),
sd_rank = sd(rank),
min_rank = min(rank),
max_rank = max(rank),
range = max_rank - min_rank)
print(team_fluctuations)
# 2. Compute the average absolute year-to-year change in rankings for each team
rank_differences <- combined_rankings %>%
arrange(Team, season) %>%
group_by(Team) %>%
mutate(lead_rank = lead(rank),
abs_diff = abs(lead_rank - rank)) %>%
summarise(avg_change = mean(abs_diff, na.rm = TRUE))
print(rank_differences)
# Merge the two summaries for a combined view:
team_summary <- team_fluctuations %>%
inner_join(rank_differences, by = "Team")
print(team_summary)
team_fluctuations
rank_differences
team_summary
View(team_summary)
min(team_summary$avg_change)
max(team_summary$avg_change)
mean(team_summary$avg_change)
p
# Create a plot where each team's ranking over the years is shown
p <- ggplot(combined_rankings, aes(x = season, y = rank, group = Team, color = Team)) +
geom_line(size = 1) +
geom_point() +
scale_y_reverse(breaks = 1:max(combined_rankings$rank)) + # use scale_y_reverse() to have rank 1 at the top.
labs(title = "Yearly MLB Team Rankings",
x = "Season",
y = "Ranking (1 = Best)") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5))
p
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Read data and construct the transition matrix
game_data <- readRDS("data.rds")
transition_matrix <- construct(game_data, NULL)
# Number of teams
num_teams <- nrow(transition_matrix)
# Gold Coin Simulation (METHOD 1)
set.seed(42)  # Ensure reproducibility
num_steps <- 20000  # Total transitions
burn_in <- 1000  # Burn-in period
# Start with a randomly selected team
current_team <- sample(1:num_teams, 1)
coin_counts <- numeric(num_teams)
for (step in 1:num_steps) {
# Choose next team based on transition probabilities
current_team <- sample(1:num_teams, 1, prob = transition_matrix[current_team, ])
# Only count occurrences after burn-in period
if (step > burn_in) {
coin_counts[current_team] <- coin_counts[current_team] + 1}
}
# Normalize the coin counts to get probabilities
gold_coin_ranking <- coin_counts / sum(coin_counts)
gold_coin_results <- data.frame(Team = rownames(transition_matrix), PageRank_Score = gold_coin_ranking)
gold_coin_results <- gold_coin_results %>% arrange(desc(PageRank_Score))
gold_coin_results
# Start with uniform distribution
b <- rep(1 / num_teams, num_teams)
for (i in 1:10000) {
b <- b %*% transition_matrix
}
steady_state_ranking <- as.vector(b)
steady_state_results <- data.frame(Team = rownames(transition_matrix), PageRank_Score = steady_state_ranking)
steady_state_results <- steady_state_results %>% arrange(desc(PageRank_Score))
steady_state_results
seasons <- sort(unique(game_data$season))
yearly_rankings <- list()
for (yr in seasons) {
# Construct the transition matrix for the current season
tm <- construct(game_data, years = yr)
# Check the number of teams in this season (should be the same overall)
num_teams_yr <- nrow(tm)
# Compute the steady state using the iterative method
b <- rep(1 / num_teams_yr, num_teams_yr)
num_iterations <- 10000
for (i in 1:num_iterations) {
b <- b %*% tm
}
# Save the ranking for the current season
ranking_yr <- data.frame(Team = rownames(tm), PageRank_Score = as.vector(b))
ranking_yr <- ranking_yr[order(-ranking_yr$PageRank_Score), ]
yearly_rankings[[as.character(yr)]] <- ranking_yr
}
# Combine rankings for plot
combined_rankings <- do.call(rbind, lapply(names(yearly_rankings), function(season_str) {
df <- yearly_rankings[[season_str]]
df <- df %>%
arrange(desc(PageRank_Score)) %>% # descending order (best team at top)
mutate(rank = row_number(), # assign rank based on ordering
season = as.integer(season_str))
return(df)
}))
head(combined_rankings)
# Create a plot where each team's ranking over the years is shown
p <- ggplot(combined_rankings, aes(x = season, y = rank, group = Team, color = Team)) +
geom_line(size = 1) +
geom_point() +
scale_y_reverse(breaks = 1:max(combined_rankings$rank)) + # use scale_y_reverse() to have rank 1 at the top.
labs(title = "Yearly MLB Team Rankings",
x = "Season",
y = "Ranking (1 = Best)") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5))
p
# Get the mean/standard deviation/range of ranks for each team
team_fluctuations <- combined_rankings %>%
group_by(Team) %>%
summarise(mean_rank = mean(rank),
sd_rank = sd(rank),
min_rank = min(rank),
max_rank = max(rank),
range = max_rank - min_rank)
team_fluctuations
# Get the average yearly change in rankings for each team
rank_differences <- combined_rankings %>%
arrange(Team, season) %>%
group_by(Team) %>%
mutate(lead_rank = lead(rank), # get the vector offset by 1 index for difference
abs_diff = abs(lead_rank - rank)) %>%
summarise(avg_change = mean(abs_diff, na.rm = TRUE))
rank_differences
# Merge these
team_summary <- team_fluctuations %>%
inner_join(rank_differences, by = "Team")
team_summary
min(team_summary$avg_change)
max(team_summary$avg_change)
mean(team_summary$avg_change)
# Based on this new summary, it's clear that MLB teams fluctuate greatly from year to year,
# Based on this new summary, it's clear that MLB teams fluctuate greatly from year to year,
# with as large as 10.6 ranks changed on average between seasons, and the mean average
# Based on this new summary, it's clear that MLB teams fluctuate greatly from year to year,
# with as large as 10.6 ranks changed on average between seasons, and the mean average
# fluctuation being roughly 7 ranks changed between seasons across every team.
